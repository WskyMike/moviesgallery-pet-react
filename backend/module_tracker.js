import dotenv from 'dotenv';
import express from 'express';
import axios from 'axios';
import process from 'process';
import moment from 'moment-timezone';
import fs from 'fs';
import path from 'path';
import ipRangeCheck from 'ip-range-check';

dotenv.config();
const router = express.Router();

// –ó–∞–¥–∞—ë–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ (—Å–æ–∑–¥–∞–¥–∏–º –ø–∞–ø–∫—É logs, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
const logsDir = path.join(process.cwd(), 'logs');
const logFilePath = path.join(logsDir, 'tracker.log');

if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir);
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞
const checkSecret = (req, res, next) => {
  const secret = process.env.STATS_SECRET;
  if (req.query.secret !== secret) {
    return res.status(403).send('üîí –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  }
  next();
};

/**
 * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö.
 */
router.post('/log', async (req, res) => {
  const rawIp = req.headers['x-forwarded-for'] || req.socket.remoteAddress;
  const clientIp = rawIp ? rawIp.split(',')[0].replace(/^::ffff:/, '') : 'n/a';
  // const ipList = rawIp ? rawIp.split(',').map(ip => ip.trim().replace(/^::ffff:/, '')) : ["n/a"]; // –í—Å–µ IP –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞
  // const ipString = ipList.join(" ‚Üí "); // –í—ã–≤–æ–¥–∏–º –≤—Å–µ IP —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å—Ç—Ä–µ–ª–∫–∞
  // console.log(`üîó IP-–∞–¥—Ä–µ—Å–∞: ${ipString}`);

  // –ï—Å–ª–∏ IP –≤—Ö–æ–¥–∏—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 46.32.64.0/19, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  if (ipRangeCheck(clientIp, '46.32.64.0/19')) {
    console.log(
      `‚ùé IP ${clientIp} –≤—Ö–æ–¥–∏—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 46.32.64.0/19 ‚Äì –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.`
    );
    return res.json({ status: 'ok', skipped: true });
  }

  let geoData = {};

  try {
    // –ó–∞–ø—Ä–æ—Å –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö —Å ip-api.com
    const response = await axios.get(
      `http://ip-api.com/json/${clientIp}?fields=continent,country,city,regionName,isp,org,mobile&lang=ru`
    );
    geoData = response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö:', error.message);
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π –ª–æ–≥ —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –≥–µ–æ–¥–∞–Ω–Ω—ã–º–∏
  const logEntry = {
    timestamp: moment().tz('Europe/Moscow').format('DD.MM.2025 HH:mm:ss'), // –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –∑–æ–Ω–µ
    ip: clientIp, // IP-–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å
    url: req.body.url || '', // –¢–µ–∫—É—â–∏–π URL, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    referrer: req.body.referrer || '', // –ü—Ä–µ–¥—ã–¥—É—â–∏–π URL, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    userAgent: req.get('User-Agent') || 'n/a', // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∫–ª–∏–µ–Ω—Ç–∞
    continent: geoData.continent || 'n/a', // –ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–æ IP-–∞–¥—Ä–µ—Å—É –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    country: geoData.country || 'n/a', // –°—Ç—Ä–∞–Ω–∞, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –ø–æ IP-–∞–¥—Ä–µ—Å—É –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    city: geoData.city || 'n/a', // –ì–æ—Ä–æ–¥, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–æ IP-–∞–¥—Ä–µ—Å—É –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    regionName: geoData.regionName || 'n/a', // –†–µ–≥–∏–æ–Ω, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–æ IP-–∞–¥—Ä–µ—Å—É –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    isp: geoData.isp || 'n/a', // –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    org: geoData.org || 'n/a', // –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç IP-–∞–¥—Ä–µ—Å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    device: req.body.device || 'n/a', // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ü–ö, —Å–º–∞—Ä—Ç—Ñ–æ–Ω, –ø–ª–∞–Ω—à–µ—Ç)
    browser: req.body.browser || 'n/a', //
    screen: req.body.screenResolution || 'n/a', // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    os: req.body.os || 'n/a', // –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  };

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥ –≤ —Ñ–∞–π–ª (–∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∏ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏)
  fs.appendFile(logFilePath, JSON.stringify(logEntry) + '\n', (err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:', err);
    } else {
      console.log('‚úÖ –õ–æ–≥ –ø–æ—Å–µ—â–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω.');
    }
  });

  res.json({ status: 'ok' });
});

/**
 * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
 */
router.post('/clear', checkSecret, (req, res) => {
  fs.writeFile(logFilePath, '', (err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:', err);
      return res
        .status(500)
        .json({ status: 'error', message: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤' });
    }
    console.log('‚úÖ –õ–æ–≥–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.');
    res.json({ status: 'ok' });
  });
});

/**
 * –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
 */
router.get('/test', (req, res) => {
  res.send('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç');
});

/**
 * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –≤–∏–¥–µ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã.
 */
router.get('/stats', checkSecret, (req, res) => {
  fs.readFile(logFilePath, 'utf8', (err, data) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤:', err);
      return res.send('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤');
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    const lines = data.split('\n').filter((line) => line.trim() !== '');
    // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ JSON
    let fileLogs = lines
      .map((line) => {
        try {
          return JSON.parse(line);
        } catch (e) {
          return null;
        }
      })
      .filter((entry) => entry !== null);

    // –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–≤—ã–º–∏
    fileLogs = fileLogs.reverse();

    let html = `
      <!DOCTYPE html>
      <html lang="ru">
        <head>
          <meta charset="UTF-8">
          <title>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π</title>
          <style>
            body { font-family: Arial, sans-serif; font-size: 0.8rem; margin: 20px;}
            .header {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin-bottom: 20px;
            }
            table { width: 100%; border-collapse: collapse; }
            th, td { border: 1px solid #ccc; padding: 5px; text-align: left; }
            th { background-color: #f4f4f4; }
            a { text-decoration: none; color: blue; }
            .url-cell {
              max-width: 150px;
              overflow: hidden;
              text-overflow: ellipsis;
              white-space: nowrap;
            }
            .url-title {
              max-width: 150px;
              overflow: hidden;
            }
            .ip-address {
              font-weight: bold;
              margin-bottom: 5px;
            }
            .font-small {
              font-size: 0.9em;
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1 style="margin: 0;">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π</h1>
            <button id="clearBtn" style="padding: 8px 16px; font-size: 0.8rem; cursor: pointer; background-color: bisque; border: none; border-radius: 5px;">–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</button>
          </div>
          <table>
            <thead>
              <tr>
                <th>‚Ññ</th>
                <th>–í—Ä–µ–º—è</th>
                <th>IP & Geo</th>
                <th class="url-title">–ü—Ä–µ–¥—ã–¥—É—â–∏–π URL</th>
                <th class="url-title">–¢–µ–∫—É—â–∏–π URL</th>
                <th>User Agent</th>
                <th>Browser</th>
                <th>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ)</th>
                <th>–û–°</th>
              </tr>
            </thead>
            <tbody>
    `;

    for (let i = 0; i < fileLogs.length; i++) {
      const log = fileLogs[i];
      const [date, time] = log.timestamp.split(' ');
      html += `
        <tr>
          <td>${fileLogs.length - i}</td>
          <td>${date} <strong>${time}</strong></td>
          <td>
            <div class="ip-address">${log.ip}</div>
            <div class="font-small">${log.continent || ''} ${log.country || ''} ${log.regionName || ''} ${log.city || ''} ${log.isp || ''}</div>
          </td>
          <td class="url-cell">
            <a href="${log.referrer}" target="_blank" title="${log.referrer}">${log.referrer}</a>
          </td>
          <td class="url-cell">
            <a href="${log.url}" target="_blank" title="${log.url}">${log.url}</a>
          </td>
          <td class="font-small">${log.userAgent}</td>
          <td>${log.browser}</td>
          <td>${log.device} (${log.screen})</td>
          <td>${log.os}</td>
        </tr>
    `;
    }

    html += `
            </tbody>
          </table>
          <script>
            const secret = "${process.env.STATS_SECRET}";
            document.getElementById('clearBtn').addEventListener('click', function() {
              if (confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?')) {
                fetch('/back/clear?secret=' + secret, { method: 'POST' })
                  .then(response => response.json())
                  .then(data => {
                    if (data.status === 'ok') {
                      window.location.reload();
                    } else {
                      alert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
                    }
                  })
                  .catch(err => {
                    alert('–û—à–∏–±–∫–∞: ' + err.message);
                  });
              }
            });
          </script>
        </body>
      </html>
    `;

    res.send(html);
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Äa
export default router;

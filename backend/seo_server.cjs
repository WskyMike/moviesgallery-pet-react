/* eslint-disable no-undef */
require("@babel/register")({
    presets: ["@babel/preset-env", "@babel/preset-react"]
});
global.React = require("react");
const React = require("react");
const express = require("express");
const axios = require("axios");
const process = require("process");
const dotenv = require("dotenv");
const { renderToStaticMarkup } = require("react-dom/server");
// const cron = require("node-cron");
const SEOPage = require("./SEOPage.jsx").default;
const { transformSeoMovieData, transformSeoTvData, transformSeoMoviesCreditsData, transformSeoTvCreditsData } = require("./transformSeoData.js");

dotenv.config();

const app = express();
const PORT = 3000;
const HOSTNAME = "https://moviegallery.tw1.ru";
const TMDB_API_TOKEN = process.env.TMDB_API_TOKEN;

// === Sitemap caching: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ ===
const MAX_PAGES = 500; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü API TMDB
let cachedMovieIds = [];
let cachedTvIds = [];
let lastUpdated = null;
let isUpdatingCache = false; // –§–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ID —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ —Å TMDB
async function fetchMovieOrTVIds(type) {
    console.log(`üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ${type} (–¥–æ ${MAX_PAGES} —Å—Ç—Ä–∞–Ω–∏—Ü)...`);
    let ids = [];
    const startTime = Date.now();
    for (let page = 1; page <= MAX_PAGES; page++) {
        try {
            const response = await axios.get(
                `https://api.themoviedb.org/3/${type}/popular?page=${page}`,
                { headers: { Authorization: `Bearer ${TMDB_API_TOKEN}` } }
            );
            if (response.data.results) {
                ids.push(...response.data.results.map(item => item.id));
            }
            // –ñ–¥–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            const delay = Math.floor(Math.random() * 500) + 1;
            await new Promise(resolve => setTimeout(resolve, delay));
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${type} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}):`, error.message);
        }
    }
    const endTime = Date.now();
    console.log(`‚è≥ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ ${type}: ${((endTime - startTime) / 60000).toFixed(1)} –º–∏–Ω`);
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${ids.length} ID –¥–ª—è ${type}`);

    return ids;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ 
async function updateCache() {
    if (isUpdatingCache) return;
    isUpdatingCache = true;
    console.log("‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤...");
    cachedMovieIds = await fetchMovieOrTVIds("movie");
    cachedTvIds = await fetchMovieOrTVIds("tv");
    lastUpdated = new Date();
    console.log(`‚úÖ –ö–µ—à –æ–±–Ω–æ–≤–ª—ë–Ω: ${lastUpdated.toLocaleString()}`);
    isUpdatingCache = false;
}

// Middleware: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
app.use((req, res, next) => {
    if (isUpdatingCache) {
        console.warn(`üöß –°–µ—Ä–≤–µ—Ä –∑–∞–Ω—è—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö. –ë–ª–æ–∫–∏—Ä—É–µ–º: ${req.path}`);
        return res.status(503).send("üîÑ –°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
    next();
});

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
updateCache();

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
// cron.schedule("05 3 * * *", async () => {
//     await updateCache();
// });

// === Sitemap endpoints ===
// –ò–Ω–¥–µ–∫—Å–Ω—ã–π —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –¥–æ—á–µ—Ä–Ω–∏–µ —Ñ–∞–π–ª—ã
app.get("/sitemap.txt", (req, res) => {
    res.header("Content-Type", "text/plain");
    console.log("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π sitemap.txt");
    let sitemapContent = [
        `${HOSTNAME}/sitemap-movies.txt`,
        `${HOSTNAME}/sitemap-tv.txt`
    ].join("\n");
    res.send(sitemapContent);
});

// Sitemap –¥–ª—è —Ñ–∏–ª—å–º–æ–≤
app.get("/sitemap-movies.txt", (req, res) => {
    if (!cachedMovieIds.length) {
        console.warn("‚ö†Ô∏è sitemap-movies.txt –ø—É—Å—Ç! –í–æ–∑–≤—Ä–∞—â–∞–µ–º 404");
        return res.status(404).send("Not Found");
    }
    console.log(`üé¨ –û—Ç–¥–∞–µ–º sitemap-movies.txt (${cachedMovieIds.length} —Ñ–∏–ª—å–º–æ–≤)`);
    res.header("Content-Type", "text/plain");
    res.send(cachedMovieIds.map(id => `${HOSTNAME}/movie/${id}`).join("\n"));
});

// Sitemap –¥–ª—è —Å–µ—Ä–∏–∞–ª–æ–≤
app.get("/sitemap-tv.txt", (req, res) => {
    if (!cachedTvIds.length) {
        console.warn("‚ö†Ô∏è sitemap-tv.txt –ø—É—Å—Ç! –í–æ–∑–≤—Ä–∞—â–∞–µ–º 404");
        return res.status(404).send("Not Found");
    }
    console.log(`üì∫ –û—Ç–¥–∞–µ–º sitemap-tv.txt (${cachedTvIds.length} —Å–µ—Ä–∏–∞–ª–æ–≤)`);
    res.header("Content-Type", "text/plain");
    res.send(cachedTvIds.map(id => `${HOSTNAME}/tv/${id}`).join("\n"));
});

// === SEO endpoint ===
app.get("/seo/:type/:id", async (req, res) => {
    const { type, id } = req.params;
    const url = `${req.protocol}://${req.get('host')}${req.originalUrl}`;
    const userAgent = req.get("User-Agent");
    let transformedData;

    try {
        if (type === "movie") {
            const [detailsRes, creditsRes] = await Promise.all([
                axios.get(`https://api.themoviedb.org/3/movie/${id}?language=ru-RU`, {
                    headers: { Authorization: `Bearer ${TMDB_API_TOKEN}` },
                }),
                axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?language=ru-RU`, {
                    headers: { Authorization: `Bearer ${TMDB_API_TOKEN}` },
                }),
            ]);
            transformedData = await transformSeoMovieData(detailsRes.data);
            const credits = await transformSeoMoviesCreditsData(creditsRes.data);
            transformedData.credits = credits;

        } else if (type === "tv") {
            const [detailsRes, creditsRes] = await Promise.all([
                axios.get(`https://api.themoviedb.org/3/tv/${id}?language=ru-RU`, {
                    headers: { Authorization: `Bearer ${TMDB_API_TOKEN}` },
                }),
                axios.get(`https://api.themoviedb.org/3/tv/${id}/aggregate_credits?language=ru-RU`, {
                    headers: { Authorization: `Bearer ${TMDB_API_TOKEN}` },
                }),
            ]);
            transformedData = await transformSeoTvData(detailsRes.data);
            const credits = await transformSeoTvCreditsData(creditsRes.data);
            transformedData.credits = credits;

        } else {
            return res.status(400).send("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞");
        }

        // –†–µ–Ω–¥–µ—Ä–∏–º SEOPage —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const html = renderToStaticMarkup(React.createElement(SEOPage, { media: transformedData, type, url }));
        res.header("Content-Type", "text/html");
        console.log(`üïµÔ∏è –ü—Ä–∏—à—ë–ª User-Agent: ${userAgent}. ‚úÖ SEO-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞: ${url}`);
        return res.send(`<!DOCTYPE html>${html}`);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO-—Å—Ç—Ä–∞–Ω–∏—Ü—ã:", error.message);
        return res.status(500).send("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO-—Å—Ç—Ä–∞–Ω–∏—Ü—ã");
    }
});

// === Fallback: —Ä–µ–¥–∏—Ä–µ–∫—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ ===
app.get("*", (req, res) => {
    res.redirect(`https://moviegallery.tw1.ru${req.path}`);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => console.log(`‚úÖ SEO c–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ ${PORT} –ø–æ—Ä—Ç—É`));
